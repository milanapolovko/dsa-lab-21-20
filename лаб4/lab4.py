import os, asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext  
from dotenv import load_dotenv


load_dotenv()

API_TOKEN = os.getenv("API_TOKEN")

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

currency_rates = {}

class Form(StatesGroup):
    save_currency_name = State()
    save_currency_rate = State()
    convert_currency_name = State()
    convert_amount = State()


@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø –±–æ—Ç-–∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç, –∫ –≤–∞—à–∏–º —É—Å–ª—É–≥–∞–º!\n"
                        "–£—Å—Ç–∞–ª —Å—á–∏—Ç–∞—Ç—å –≤ —É–º–µ? –Ø –ø–æ–º–æ–≥—É! üí∏\n"
                        "–ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
                        "/save_currency - –ß—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫—É—Ä—Å, –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π —Ñ–∏–Ω–∞–Ω—Å–∏—Å—Ç.\n"
                        "/convert - –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä—É–±–ª–∏, –∫–∞–∫ –±–∏–∑–Ω–µ—Å–º–µ–Ω!")


@dp.message(Command("save_currency"))
async def save_currency_command(message: types.Message, state: FSMContext):
    await state.set_state(Form.save_currency_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, USD, EUR):")


@dp.message(Form.save_currency_name)
async def get_currency_name(message: types.Message, state: FSMContext):
    currency_name = message.text.upper()
    await state.update_data(currency=currency_name)
    await state.set_state(Form.save_currency_rate)
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å {currency_name} –∫ —Ä—É–±–ª—é:")


@dp.message(Form.save_currency_rate)
async def get_currency_rate(message: types.Message, state: FSMContext):
    try:
        rate = float(message.text)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return
    data = await state.get_data()
    currency_name = data["currency"]
    currency_rates[currency_name] = rate
    await state.clear()
    await message.answer(f"–ö—É—Ä—Å {currency_name} –∫ —Ä—É–±–ª—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")


@dp.message(Command("convert"))
async def convert_command(message: types.Message, state: FSMContext):
    await state.set_state(Form.convert_currency_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Ä—É–±–ª–∏:")


@dp.message(Form.convert_currency_name)
async def get_currency_to_convert(message: types.Message, state: FSMContext):
    currency_name = message.text.upper()
    await state.update_data(currency=currency_name)
    await state.set_state(Form.convert_amount)
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ {currency_name} –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:")


@dp.message(Form.convert_amount)
async def get_amount_to_convert(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return
    data = await state.get_data()
    currency_name = data["currency"]

    if currency_name not in currency_rates:
        await message.answer(f"–ö—É—Ä—Å –¥–ª—è –≤–∞–ª—é—Ç—ã {currency_name} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫—É—Ä—Å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /save_currency.")
        await state.clear()
        return
    rate = currency_rates[currency_name]
    rubles = amount * rate
    await state.clear()
    await message.answer(f"{amount} {currency_name} = {rubles:.2f} RUB")


async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())